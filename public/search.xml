<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>背包问题全解</title>
    <url>/posts/236f2ea1/</url>
    <content><![CDATA[<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h2><p>有 NN 件物品和一个容量是 VV 的背包。每件物品只能使用一次。</p>
<p>第 ii 件物品的体积是 vivi，价值是 wiwi。</p>
<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，VN，V，用空格隔开，分别表示物品数量和背包容积。</p>
<p>接下来有 NN 行，每行两个整数 vi,wivi,wi，用空格隔开，分别表示第 ii 件物品的体积和价值。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤10000&lt;N,V≤1000<br>0&lt;vi,wi≤10000&lt;vi,wi≤1000</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 5</span><br><span class="line">1 2</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>

<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态表示 f[i][j] </span><br><span class="line">	集合 表示取前i件物品，体积为j的时候能取到的最大价值</span><br><span class="line">	属性 max</span><br><span class="line">集合划分</span><br><span class="line">使用最后一个变化的状态也就是f[i-1]表示取前i-1件物品，这个时候如果j&gt;=v[i]</span><br><span class="line">	两种情况：取第i件物品，不取第i件物品，取最大值</span><br><span class="line">	即f[i][j] = max(f[i-1][j], f[i - 1][j - v[i]] + w[i])</span><br><span class="line">	需要的是上一个状态的下的方程。</span><br><span class="line">	二维状态下 时间复杂度和空间复杂度均为O(NV)</span><br><span class="line">优化成一维：</span><br><span class="line">	因为需要上一个状态的数值，那么可以让体积j从大到小枚举，保证每一次使用的体积是上一次剩下的体积</span><br><span class="line">	一维状态下的时间复杂度没有变，但是空间复杂度被优化到O(V)</span><br></pre></td></tr></table></figure>

<p>不明白如下图:</p>
<p><img src="01bag.png" alt="image-20220711194829236"></p>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: pzj</span></span><br><span class="line"><span class="comment"> * Date: 2022/7/10</span></span><br><span class="line"><span class="comment"> * Time: 9:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1010</span>;</span><br><span class="line"><span class="comment">//    private static final int [][] f = new int[N][N];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * f[i][j]表示在取前i件物品，体积为j的时候能取到的最大价值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public static void main(String[] args) throws IOException &#123;</span></span><br><span class="line"><span class="comment">//        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</span></span><br><span class="line"><span class="comment">//        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));</span></span><br><span class="line"><span class="comment">//        String[] s = br.readLine().split(&quot; &quot;);</span></span><br><span class="line"><span class="comment">//        int n = Integer.parseInt(s[0]);</span></span><br><span class="line"><span class="comment">//        int m = Integer.parseInt(s[1]);</span></span><br><span class="line"><span class="comment">//        // 每次输入一堆v，w值，因为对于dp来说每一次都是用一组v，w值取更新，所以可以不用数组来接收</span></span><br><span class="line"><span class="comment">//        for (int i = 1; i &lt;= n ; i++) &#123;</span></span><br><span class="line"><span class="comment">//            String[] s1 = br.readLine().split(&quot; &quot;);</span></span><br><span class="line"><span class="comment">//            int v = Integer.parseInt(s1[0]);</span></span><br><span class="line"><span class="comment">//            int w = Integer.parseInt(s1[1]);</span></span><br><span class="line"><span class="comment">//            for(int j = 0 ; j &lt;= m;j++)&#123;</span></span><br><span class="line"><span class="comment">//                f[i][j] = f[i-1][j];</span></span><br><span class="line"><span class="comment">//                if(j  &gt;= v)&#123;</span></span><br><span class="line"><span class="comment">//                    f[i][j] = Math.max(f[i][j], f[i-1][j-v] + w);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        int res = 0;</span></span><br><span class="line"><span class="comment">//        for(int i = 0 ; i &lt;= m;i++) res = Math.max(res, f[n][i]);</span></span><br><span class="line"><span class="comment">//        System.out.println(res);</span></span><br><span class="line"><span class="comment">//        br.close();</span></span><br><span class="line"><span class="comment">//        bw.close();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> [] f = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * f[i]表示体积为i时物品价值的最大值</span></span><br><span class="line"><span class="comment">     * 为了保证此时的f[i]使用的状态是上一次的状态，可以让体积从大到小进行计算，保证每一次使用的体积是上一次剩下的状态</span></span><br><span class="line"><span class="comment">     * 此时f[m]必定为最大值</span></span><br><span class="line"><span class="comment">     * 证明:</span></span><br><span class="line"><span class="comment">     *      如果f[k] = max_w,两种情况:</span></span><br><span class="line"><span class="comment">     *          从f[0]转移 ==&gt;f[v[0]] + w[0] == &gt;  ...==&gt; f[k]</span></span><br><span class="line"><span class="comment">     *          不从f[0]转移，其实本质上是一样的f那么从f[m - k]转移，因为所有的f值初始化为0，</span></span><br><span class="line"><span class="comment">     *          那么可以通过同样的转移路径得到f[m] = f[m - k] == &gt; ..... ==&gt; f[m]和f[k]的值是一样的，所以f[m]一定是最大值</span></span><br><span class="line"><span class="comment">     *      如果吧f[0]初始化为0,其他值初始化为负无穷，可以保证此时路径必定只能从f[0]进行转移,此时需要循环判断哪里是最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 每次输入一堆v，w值，因为对于dp来说每一次都是用一组v，w值取更新，所以可以不用数组来接收</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            String[] s1 = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> Integer.parseInt(s1[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> Integer.parseInt(s1[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> m ; j &gt;= v;j--)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(j - v);</span></span><br><span class="line">                f[j] = Math.max(f[j], f[j-v] + w);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(f[m]);</span><br><span class="line">        br.close();</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>有 NN 种物品和一个容量是 VV 的背包，每种物品都有无限件可用。</p>
<p>第 ii 种物品的体积是 vivi，价值是 wiwi。</p>
<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，VN，V，用空格隔开，分别表示物品种数和背包容积。</p>
<p>接下来有 NN 行，每行两个整数 vi,wivi,wi，用空格隔开，分别表示第 ii 种物品的体积和价值。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p>
<h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤10000&lt;N,V≤1000<br>0&lt;vi,wi≤10000&lt;vi,wi≤1000</p>
<h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 5</span><br><span class="line">1 2</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure>

<h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路:"></a>解题思路:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因为每一种物品都可以无限使用，那么完全背包问题就是在01背包问题的情况下添加一下物品的限制</span><br><span class="line">相当于有无数件物品，只需要判断每一次 k * v[i] &lt;= j的时候，每一次都判断f[j]以及f[j - k * v] + w * k 的最大值即可。</span><br><span class="line">状态表示 f[i][j] </span><br><span class="line">	集合 表示取前i件物品，体积为j的时候能取到的最大价值</span><br><span class="line">	属性 max</span><br><span class="line">集合划分</span><br><span class="line">使用最后一个变化的状态也就是f[i-1]表示取前i-1件物品，这个时候如果j&gt;=v[i]</span><br><span class="line">	两种情况：取第i件物品，不取第i件物品，取最大值</span><br><span class="line">	即f[i][j] = max(f[i-1][j], f[i - 1][j - v[i]] + w[i])</span><br><span class="line">	需要的是上一个状态的下的方程。</span><br><span class="line">	二维状态下 时间复杂度和空间复杂度均为O(NV)</span><br><span class="line">优化成一维：</span><br><span class="line">	因为需要上一个状态的数值，那么可以让体积j从大到小枚举，保证每一次使用的体积是上一次剩下的体积</span><br><span class="line">	一维状态下的时间复杂度没有变，但是空间复杂度被优化到O(V)</span><br></pre></td></tr></table></figure>

<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: pzj</span></span><br><span class="line"><span class="comment"> * Date: 2022/7/10</span></span><br><span class="line"><span class="comment"> * Time: 10:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1010</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> [] f = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        String[] s = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 每次输入一堆v，w值，因为对于dp来说每一次都是用一组v，w值取更新，所以可以不用数组来接收</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            String[] s1 = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> Integer.parseInt(s1[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> Integer.parseInt(s1[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> m ; j &gt;= v;j--)&#123;</span><br><span class="line"><span class="comment">//                System.out.println(j - v);</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k * v&lt;= j;k++)</span><br><span class="line">                    f[j] = Math.max(f[j], f[j-k * v] + k * w);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(f[m]);</span><br><span class="line">        br.close();</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多重背包问题1"><a href="#多重背包问题1" class="headerlink" title="多重背包问题1"></a>多重背包问题1</h2><p>有 NN 种物品和一个容量是 VV 的背包。</p>
<p>第 ii 种物品最多有 sisi 件，每件体积是 vivi，价值是 wiwi。</p>
<p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p>
<h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，VN，V，用空格隔开，分别表示物品种数和背包容积。</p>
<p>接下来有 NN 行，每行三个整数 vi,wi,sivi,wi,si，用空格隔开，分别表示第 ii 种物品的体积、价值和数量。</p>
<h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p>
<h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤1000&lt;N,V≤100<br>0&lt;vi,wi,si≤1000&lt;vi,wi,si≤100</p>
<h4 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 5</span><br><span class="line">1 2 3</span><br><span class="line">2 4 1</span><br><span class="line">3 4 3</span><br><span class="line">4 5 2</span><br></pre></td></tr></table></figure>

<h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#### code</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>动态规划</category>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
